To run SNACKMAN on COMMODORE 64: 
    INSERT OR EMULATE DISK IMAGE "D64\SNACKMAN.D64"
    LOAD "SNACKMAN",8
    RUN

https://github.com/camperjohn64/commodore64
https://youtu.be/Fde3FTpy56U 

0. Introduction to SNACKMAN Commodore 64 game and source code

About the author

John McCarthy attended college night school to learn 6502 
programming in 1982, completing Advanced Assembly Language  
Programming 965 at George Brown College, at the age of 14. At  
the time, there was no Pac-Man game available for the VIC-20,  
and a friend of his asked if he could make Pac-Man so he could  
play it. The VIC-20 didn't have enough memory to complete the  
game, and John began to program the game for the Commodore 64.         

John McCarthy later moved on to develop games for the PC, as well  
as 3D game library called 3DVECT39, and then worked programming  
video games for Nintendo, Electronic Arts, Atari, and Sony.  

1. Development of SNACKMAN

SNACKMAN took about 8 months to program and develop all the 
graphics and sounds. There was no plan or structure for the code, 
just keep programming until it was done.

The graphics editing tools, assembler, and editor were provided 
for free from various resources. However John created 
"STRINGMON", a Machine Language Monitor (MLM), with a built-in 
linker to be able to package up the code and graphics for the 
final version of SNACKMAN.  

John had said he wanted to program and market SNACKMAN to pay for 
his mom's mortgage after hearing about a basketball player paying 
off his own mothers mortgage. 

However upon showing the game to various companies, SNACKMAN was 
pirated even before being released. The pirated version of 
SNACKMAN saturated the game market and made it impossible to sell 
SNACKMAN. The game never made it to market, and John made exactly 
$0 from SNACKMAN.

As the yellow Pac-Man graphic is copywritten, the yellow 
character in SNACKMAN was intended to only be a temporary 
graphic. However once the game was pirated, there was no longer 
motivation or reason to replace the graphic with something 
original.

If you like game and source code, please consider making a donation
to john@mccarthy.net Paypal. 

2. Loading and playing SNACKMAN
    C64: LOAD "SNACKMAN",8
    C64: RUN
    
2.1 Controls: TFGH for Up, Left, Down and Right. Space Bar to start.
    Joystick Port 2. Button to start.

3. Compiling the code

Use "RTC EDITOR" to view and edit SEQ code files. The number 9 
denotes device #9 as the drive that contints the editor and 
assembler programs.
    C64: LOAD "RTC EDITOR*",9
    C64: RUN
    
Get, list, renumber, delete, and save SEQ file. The following 
commands assume the SEQ code files are on device #8.
    C64: GET "SNACKMAN.1"
    C64: LIST
    C64: NUMBER
    C64: OPEN 1,8,15,"S:SNACKMAN.1":CLOSE 1
    C64: PUT "SNACKMAN.1"    
          
Use "ASSEMBLER" to assemble the code and create object files. 
Delete previous versions of the code and object file. The 
assembler assumes the source code will be on device #8.
    C64: OPEN 1,8,15,"S:SNACKMAN.":CLOSE 1     
    C64: LOAD "ASSEMBLER*",9
    C64: RUN
            OBJECT FILE: SNACKMAN.
            HARD COPY: N
            CROSS REFERENCE: N
            SOURCE FILE NAME: SNACKMAN.1

Use "8000.1 STRINGMON" to load the object code, graphics, and 
mazes, and then save a prg file. The numbers 9,1 tell the loader 
to load STRINGMON into upper memory, from device #9. The OPEN 
command deletes the old version before saving a new version.
    C64: SYS 64738
    C64: OPEN 1,8,15,"S:SNACKMAN":CLOSE 1
    C64: LOAD "8000.1*",9,1
    C64: SYS 32768
         .F 0801 7FFF 00
         .* 8,"SNACKMAN."    
         .L 8,"GRAPHICS",2000
         .L 8,"MAZES",5300
         .S 8,"SNACKMAN",0801,7FFF
         .X
    C64: RUN
    
Use "SPRITE BOOT" to load and edit graphics files. The BOOT 
program will load a secondary program from device #8.
    C64: LOAD "GRAPHICS",8,1
    (SWITCH DISK TO SPRITE BOOT)
    C64: LOAD "SPRITE BOOT",8
    C64: RUN

Use "CHAR BOOT" to load and edit character font files. The BOOT 
program will load a secondary program from device #8.
    C64: LOAD "GRAPHICS",8,1
    (SWITCH DISK TO CHAR BOOT)
    C64: LOAD "CHAR BOOT",8
    C64: RUN

