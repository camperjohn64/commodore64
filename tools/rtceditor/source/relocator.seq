;******************************************************;**                                                  **;**           RELOCATABLE OBJECT RELOCATOR           **;**                 FOR RTC EDITOR                   **;**                                                  **;** BY JOHN MCCARTHY                                 **;**                                                  **;**  SEPTEMBER 4, 1984                               **;**                                                  **;******************************************************; NOREL=0 ; NO RELOCATION LOWREL=NOREL+1 ; LOW BYTE RELOCATION HIREL=LOWREL+1 ; HIGH BYTE RELOCATION; POINT=$5F ; POINTER FOR STRINGS OFFSET=POINT+4 ; LOAD ADDRESS OFFSET BASEND=$2D ; BASIC END POINTER MEMEND=$33 ; MEMORY END POINTER; PRTNUM=$BDCD ; PRINT DECIMAL NUMBER PRINT=$FFD2 ; OUTPUT CHARACTER; COLOUR=$D020 ; SCREEN COLOUR REGISTER TIMERI=$DC04 ; IRQ TIMER; *=$0801;BASLNK .WORD ZEROS .BYTE <10,>10,158 .BYTE " (2064)",0ZEROS .WORD 0; LDA #0 ; SET SCREEN COLOUR STA COLOUR STA COLOUR+1 LDX #<$20BF ; SET CURSOR TIMER LDY #>$20BF STX TIMERI STY TIMERI+1 LDA #$93 ; CLEAR SCREEN JSR PRINT JMP START;STRING PLA ; PULL RETURN ADDRESS STA POINT ; ..USE AS POINTERS TO STRING PLA STA POINT+1 LDY #0OUTLP INC POINT ; INC POINTER BNE SKP1 INC POINT+1SKP1 LDA (POINT),Y ; WAS CHARACTER A ZERO? BEQ ENDSTR ; YES JSR PRINT ; PRINT IT JMP OUTLP ; PRINT NEXT CHARACTER;ENDSTR LDA POINT+1 ; PUT NEW ADDRESS BACK ON STACK PHA LDA POINT PHA RTS;GETBYT INC POINT+2 ; GET NEXT BYTE BNE NH INC POINT+3NH LDY #0 ; CLEAR INDEXER LDA (POINT+2),Y ; GET DATA BYTE RTS;PUTBYT LDY #0 ; PUT NEXT BYTE STA (POINT),Y INC POINT ; INC POINTER AFTER STORE BNE NHI INC POINT+1NHI RTS;START LDX BASEND ; GET BASIC END ADDRESS DEC BASEND ; GO BACK ONE TXA ; CHECK FOR HIGH BYTE DEC BNE NOQ DEC BASEND+1 ; YES, DEC ITNOQ LDY #0 LDA (BASEND),Y ; GET HIGHEST LO BYTE RELOCATION TAX DEX ; DEC IT STX HIGHLO LDA MEMEND SEC SBC DATA+5 ; SUBTRACT LOW BYTE LENGTH TAY LDA MEMEND+1 SBC DATA+6 ; SUBTRACT HIGH BYTE LENGTH CPY HIGHLO ; CHECK FOR LOW BYTE RELOCATION BEQ OK ; OK LOW BYTE BCC OK ; YES... LDY HIGHLO ; NO, RESET BYTE TO OK LOCATION;OK STY POINT ; SAVE POINTER FOR RELOCATION STX POINT+1 STY OFFSET STX OFFSET+1 LDA #<DATA-1 ; SET POINTER TO DATA LDY #>DATA STA POINT+2 STY POINT+3 LDX BASEND ; DEC BASEND ONCE MORE DEC BASEND TXA BNE NXTBLK DEC BASEND+1NXTBLK LDA POINT+2 CMP BASEND ; CHECK IF DONE BNE NOTDON LDA POINT+3 ;...CHECK HIGH BYTE CMP BASEND+1 BEQ FINISH;NOTDON JSR GETBYT ; GET RELOCATION TYPE BNE DOREL ; NOT NORMAL BYTES, RELOCATE 'EM JSR GETBYT ; INC TO GET TO BLOCK SIZE STA CURBYT ;...AND SAVE ITNONREL JSR GETBYT JSR PUTBYT DEC CURBYT BNE NONREL; BEQ NXTBLK ; ALWAYS GO TO NEXT BYTE;DOREL STA CURBYT ; SAVE .X TO ADD OFFSET,X JSR GETBYT ; GET NEXT BYTE LDX CURBYT ; RETURN RELOCATION TYPE CLC ADC OFFSET-1,X ; ADD RELOCATION OFFSET JSR PUTBYT JMP NXTBLK;FINISH LDA OFFSET ; DONE, SET MEMORY END POINTER LDY OFFSET+1 STA MEMEND STY MEMEND+1 LDA #0 STA BASLNK STA BASLNK+1; JSR STRING ; DONE, PRINT TITLE .BYTE 13,5 .BYTE "      **** RTC EDITOR 64 ",0 LDA DATA+7 ; PRINT VERSION NUMBER JSR PRINT LDA #"." ; PRINT DECIMAL AFTER DIGIT JSR PRINT LDA DATA+8 ; PRINT DECIMAL OF VERSION JSR PRINT JSR STRING ; PRINT REST OF STRING .BYTE " ****",13,13," 64K RAM SYSTEM ",0 LDA MEMEND SEC ; SUBTRACT TO FIND BLOCKS FREE SBC #<$0801 TAX ; SHOVE LOW BYTE INTO .X LDA MEMEND+1 SBC #>$0801 JSR PRTNUM ;...THEN PRINT IT JSR STRING ; THEN PRINT NEXT LINE .BYTE " BASIC BYTES FREE",13,0 JMP (OFFSET) ; NOW GO TO PROGRAM .BYTE "JSM";CURBYT *=*+1HIGHLO *=*+1;DATA .END