 .PAGE "EDITOR.4";****************************************************;*                                                  *;*                      RTC EDITOR                  *;*                                                  *;* COMMAND LIST FOR PART 4                          *;*                                                  *;* ASCII   TOGGLE PET/ASCII PRINTER                 *;* FLIST   FLIST "NAME"                             *;* LF      TOGGLE LINE FEEDS                        *;* STATUS  DISPLAY STATUS OF FUNCTIONS              *;*                                                  *;****************************************************;CMDPRT LDA #PRTFIL LDY #$FF LDX #4 JSR SETLFS LDA FNLEN PHA LDA #0 STA FNLEN JSR OPEN PLA STA FNLEN LDY IBSOUT+1 LDA IBSOUT STA OUTCHR+1 STY OUTCHR+2 LDA #<CHAR LDY #>CHAR STA IBSOUT STY IBSOUT+1 LDX #PRTFIL JMP CHKOUT;STERR JMP SYNTAX ; SYNTAX ERROR;;****************************************************;*                                                  *;*               TOGGLE ASCII PRINTER               *;*                                                  *;* SYNTAX: ASCII                                    *;*                                                  *;****************************************************;ASCII BNE STERR LDA FNBYTE EOR #PASC STA FNBYTE JMP READY;;****************************************************;*                                                  *;*           TOGGLE LINE FEEDS TO PRINTER           *;*                                                  *;* SYNTAX: LF                                       *;*                                                  *;****************************************************;LFEED BNE STERR LDA FNBYTE EOR #LFON STA FNBYTE JMP READY;;****************************************************;*                                                  *;*           DISPLAY STATUS OF FUNCTIONS            *;*                                                  *;* SYNTAX: MODES                                    *;*         STATUS                                   *;*                                                  *;****************************************************;FNSTAT BNE STERR JSR PSTRM .BYTE 13,"ASCII :",0 LDA #PASC JSR ONOFF JSR PSTRM .BYTE "LF    :",0 LDA #LFON JSR ONOFF JSR PSTRM .BYTE "FORMAT:",0 LDA #SCRL JSR ONOFF JSR PSTRM .BYTE "INSERT:",0 LDA #ISON JSR ONOFF JSR PSTRM .BYTE "REPEAT:",0 LDA RPTFLG AND #128 ; KILL LOWER 7 BITS JSR NOAND JMP READY;; PRINT ON/OFF;ONOFF AND FNBYTENOAND BNE ITSON JSR PSTRM .BYTE "OFF",13,0 RTS;ITSON JSR PSTRM .BYTE "ON ",13,0 RTS;KILCRT JSR CRTN LDA OUTCHR+1 LDY OUTCHR+2 STA IBSOUT STY IBSOUT+1 JSR CLRCHN LDA #PRTFIL JMP CLOSE;CHRTRC JSR CHRGT2 JMP TRC2;TRCPRG JSR TRCINC STY VERCK JSR CHRGO2TRC2 CMP #" " BEQ CHRTRC JSR TSTNUM JSR SAVREG ; SAVE REGISTERS LDY VERCK STY T3TOWED JMP WEDGE;TSTNUM CMP #":" BCS TRCRTS JMP ROMGET;TRCINC INC TXTPTR BNE *+4 INC TXTPTR+1TRCRTS RTS;;****************************************************;*                                                  *;*              LIST PROGRAM FROM DISK              *;*                                                  *;* SYNTAX: FLIST "NAME",LINE RANGE                  *;*                                                  *;****************************************************;FLIST JSR SAVOUT JSR CLRCHN JSR EVLDOS BMI LST100 JMP NOLNTH ; ILLEGAL QUANTITY ERROR;LST100 CPX #19 BCC LST110 JMP STRLNG ; STRING TO LONG ERROR;LST130 JMP NBASIC ; NOT BASIC ERROR;LST110 LSR A BCS LST120 JSR ZERO ; SET MAXIMUM RANGELST120 LDA MONVAR; CHECK=%00101100; AND #CHECK ; CHECK IF VALID FORMAT BNE LST130 ; NOT VALID JSR SEARCH ; PRINT SEARCHING FOR JSR FOR ; OPEN DISK FILE LDA #<1000-10 ; SET LINE NUMBER LDY #>1000 STA LINNUM STY LINNUM+1 JSR PSTRM .BYTE 13,"LISTING",13,0 JSR SETOUT JSR CRTN JSR CLRCHN LDX #DSKFIL JSR CHKIN ; SET INPUT DEVICELST160 LDA T1 STA LSTND JSR CLRCHN JSR HALT ; CHECK SPACE OR STOP KEY LDA STATUS ; GET STATUS PHA LDX #DSKFIL JSR CHKIN PLA BCS LST180 BEQ LST170LST180 JSR ABORT ; CLOSE FILE AND JSR SETOUT ; COMMAND CHANNEL JMP READY;LST170 CLC LDA LINNUM ADC #10 ; LINE NUMBERS INCREMENT BY 10 STA LINNUM BCC *+4 INC LINNUM+1 LDX #0 JSR TSTRNG ; TEST LINE RANGE BVS LST180 ; PAST LINE RANGE BCC LST230 ; IN LINE RANGELST220 JSR GETIN ; NOT AT RIGHT LINE CMP #CR ; SCAN 'TILL A RETURN IS FOUND BEQ LST160 BNE LST220 ;...THEN CHECK FOR NEXT LINE;LST230 JSR GETIN CPX #80 ; BUFFER FULL YET? BCC LST246 CMP #CR ; END-OF-LINE MARKER? BNE LST230 BEQ LST245;LST246 CMP #CR BNE LSTSAVLST245 LDA #0LSTSAV STA BUF,X ; PUT CHARACTERS IN BUFFER CMP #0 BEQ LST240 INX BNE LST230 ; ALWAYS;LST240 JSR SETLIN LDA #$FC ; SET LIST POINTER TO $0200-4 LDY #1 STA LOWTR STY LOWTR+1 JSR CLRCHN JSR SETOUT JSR LISTLN ; LIST LINE JMP LST160;PSTRM PLA STA INDEX1 ; STORE LOW BYTE WORD PLA STA INDEX1+1 ; STORE HIGH BYTE WORD JSR CLRCHN ; CLEAR CHANNELPSTRM1 JSR PAR130 ; ADVANCE POINTERS LDY #0 LDA (INDEX1),Y ; GET CHAR. BEQ PSTRM2 ; END OF STRING JSR PRINT ; OUTPUT ASCII CHARACTER BNE PSTRM1 ; BRANCH ALWAYSPSTRM2 LDA INDEX1+1 ; RETURN FROM SUBROUTINE PHA LDA INDEX1 PHA RTS;FOR JSR ABORT LDA FNLEN PHA LDA #0 STA FNLEN LDA #15 STA SA LDA #ERRFIL STA LA JSR OPEN PLA STA FNLEN LDA #DSKFIL STA LA DEC SA JSR OPEN BCS DEVNOT LDX #ERRFIL JSR CHKIN JSR GETIN STA INDEX1 JSR GETIN ORA INDEX1 CMP #"0" PHPLOOP2 JSR GETIN CMP #CR BNE LOOP2 PLP BEQ FOR10 PLA PLA JSR ABORT JMP NFOUND;DEVNOT JMP NODEV;FOR10 LDX LSTND STX T1 JMP CLRCHN;TSTRNG LDA LINNUM CMP INPPTR LDA LINNUM+1 SBC INPPTR+1 ; IS LINE# < LO-RANGE PHP LDA CURLIN CMP LINNUMCHKHI LDA CURLIN+1 SBC LINNUM+1 ; IS LINE# > HI-RANGE ROR A ; BIT7 _ C ROR A ; BIT6 _ BIT7 AND #%01000000 STA LOGIC+1 PLA ; GET PROCESSOR STATUS AND #%10111111 ; MASK BIT6LOGIC ORA #0 ; GET OVERFLOW STATUS EOR #%01000001 ; FLIP BIT6 & BIT0 PHA ; SAVE PROCESSOR STATUS PLP ; RECALL IT RTS;ZERO LDA #0 STA INPPTR STA INPPTR+1 LDA #$FF STA CURLIN STA CURLIN+1 RTS;CLRNUM PHA LDA #<1000 ; DEFAULT START # STA FRESPC LDA #>1000 STA FRESPC+1 LDA #10 STA FRETOP JSR ZERO PLA RTS;HEXOUT LDA LINNUM+1 ; PRINT TWO HEX DIGITS JSR OUTHEX ; FROM LINNUM LDA LINNUMOUTHEX PHA ; PRINT SINGLE HEX DIGIT LSR A ; SHIFT FOR HIGH BYTE LSR A LSR A LSR A JSR NUMOUT ; PRINT IT PLA ; GET OTHER DIGITNUMOUT AND #15 ; KILL UPPER BITS ORA #"0" ; TURN INTO ASCII CMP #":" ; GREATER THAN 10? (A-F) BCC HEXNUM ; NOPE, LEAVE AS IS ADC #6 ; ADD 6 TO TURN INTO LETTER .BYTE $2CCRTN LDA #CRHEXNUM JMP CHROUT; .FILE EDITOR.5