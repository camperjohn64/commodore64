;****************************;*                          *;*  HIRES SPRITE SIMULATOR  *;*                          *;*   MULTI-COLOUR VERSION   *;*                          *;* CAUTION* ROUTINE IS SLOW *;*                     ---- *;*                          *;****************************;PUTOBJ PHP ; IF CC, CLEAR SPRITE, NOT PUT AND #0 ; SET HIGH BYTE TO ZERO STA BY2+1 STA TMIN ; SET PLOTTING INDEXER LDA Y3 CLC ; COMPENSATE FOR NEAGTIVES ADC #32 AND #$F8 ; FORM ROW # ASL A ; MULT BY 2 ROL BY2+1 ASL A ; MULT BY 4 ROL BY2+1 ASL A ; MULT BY 8 ROL BY2+1 PHA ; SAVE ON STACK STA TEM2 ; AND IN TEM2 LDA BY2+1 STA TEM2+1 ; TEM2 HAS 8*Y PLA ; RESTORE A ASL A ; MULT BY 16 ROL BY2+1 ASL A ; MULT BY 32 ROL BY2+1 ; (CARRY STILL CLEAR) ADC TEM2 ; FORM 32+8 = 40* STA BY2 ; INTO BY2 LDA BY2+1 ADC TEM2+1 STA BY2+1 LDA X3 ; NOW ADD CHAR CMP #160 ; >159 MEANS 0 BCC NNEG EOR #$FF ; FORM 2'S COMPLEMENT ADC #3 ; ADD 4,CS AND #$FC ASL A STA TMIN ; SET WHERE TO START... LDA X3 ; RESET X1 FOR CALS AND #3 STA X3;NNEG AND #$7C ASL A ADC BY2 STA BY2 PHP ; SAVE OVERFLOW LDA X3 AND #$80 ; ADD HIGH BIT ASL A ROL A PLP ADC BY2+1 STA BY2+1 ; (CARRY STILL CLEAR) LDA BY2+1 ; FINISH BY ADDING BASE ADC #>BASE2 STA BY2+1 ; BY2 NOW POINTING TO SCREEN; LDY #0 LDA (OBJECT),Y ASL A ; *8 ASL A ASL A STA XLEN STA TMAX LSR A CLC ADC X3 AND #$FC CMP #160 ; CHECK IF OFF RIGHT BCC NOFFR SBC #160 ; CARRY ALREADY SET ASL A STA TEM2 ; FORM NEW TMAX,LESS THAN OLD LDA XLEN SEC SBC TEM2 STA TMAX;NOFFR INY LDA (OBJECT),Y STA TLEN CLC ADC #2 ; SET END MARKER FOR BLOCK STA TEM2 LDA TLEN LSR A ; FIND MIDPOINT CLC ADC #2 STA TEM2+1 ADC #8 STA V INY AND #0 STA OVER ; CLEAR OVERS AT START STA OVER+1 STA OVER+2 STA OVER+3 STA OVER+4 STA OVER+5 STA OVER+6 STA OVER+7;ROLL LDA X3 ; REMOVE CHAR BITS AND #3 ; TAX; AND #0 ; CLEAR OFLOW BITS STA OFLOW; LDA (OBJECT),Y ; ROLL OBJECT RIGHT CPX #0 ; CHECK NEED TO DO SO... BEQ NROLL CPY TEM2+1 ; SET CARRY IN IF MIDPOINT BCC ROLIN1 ; CS IF CHANGING TO SECOND HALF CPY V BCC SECC1 CLC .BYTE $24SECC1 SECROLIN1 PHP PHP ROR A ROR OFLOW ; SAVE CARRY BITS AS WE GO PLP ROR A ROR OFLOW PLP DEX BNE ROLIN1;NROLL PHA TYA ; FIND CURRENT OFLOW INDEXER SEC SBC #2 AND #7 TAX PLA ORA OVER,X STA TABLE-2,Y ; SAVE OBJECT IN TABLE LDA OFLOW STA OVER,X; INY ; NOW RETURN CARRY'S CPY TEM2 BNE ROLL; DEY DEY DEY DEC TEM2+1 DEC TEM2+1 DEC V DEC V; LDA Y3 ; TEST NEED TO ROLL DOWN AND #7 BEQ ONSCRN ; PUT IT ON SCREEN...; STA TEM2 ; SAVE DOWNWARD ROLL; TYA ; Y=MAX SBC TEM2 ; CS TAX;LEFTLP LDA TABLE,X STA TABLE,Y DEX DEY CPX #$FF BNE LEFTLP; INX ; PAST ZERO, FILL UP WITH NULLS TXA ; A=0ENDIT STA TABLE,Y DEY BPL ENDIT; LDA TLEN ; NOW SHIFT TOP TO COMPLETE ROLL ADC TEM2 ; ADC TEM2+1 CAUSE CS SBC #9 ; -10 CAUSE CC TAY; SEC SBC XLEN ADC #7 ; +8 CAUSE CS TAX;RIGHLP LDA TABLE,X STA TABLE,Y DEX DEY TXA ; CHECK LOW BITS OF X AND #7 CMP #7 BNE RIGHLP ; UNTILL DONE FIRST CHAR;RECALX TXA SEC SBC #8 CLC ADC TEM2 TAX;RECALY TYA CLC SBC #8 ; -9, BUT CC ADC TEM2 TAY; CPY #$F7 ; CHECK ROLL COMPLETE BCS ONSCRN; CPX #$F7 ; CHECK UNDERFLOW BCS FZERO3; CPX V ; CHECK MID-POINT SWITCH BCS RIGHLP CPY TEM2+1 BCC RIGHLP;FFFS LDA #$FF ; SWITCH AREA, FILL WITH FF'S STA TABLE,Y DEX DEY TXA ; CHECK LOW BITS OF X AND #7 CMP #7 BNE FFFS ; UNTILL DONE FIRST CHAR; BEQ RECALX ; ALWAYS...;FZERO3 AND #0 ; LAST AREA TO FILL STA TABLE,Y DEY TYA AND #7 ; CHECK TOP WRAP CMP #7 BNE FZERO3; BEQ RECALY;ONSCRN LDA XLEN ; PUT ROLLED OBJECT ON SCREEN SEC ; OBJECT MIGHT BE HALF ON SCREEN SBC TMAX CLC ADC TMIN STA TEM2 ; SKIP BETWEEN ROWS; LDA BY2 ; SUB IF OBJECT OFF SCREEN SEC SBC TMIN STA BY2 LDA BY2+1 SBC #0 STA BY2+1; LDA TEM2+1 STA PLTITO+1 STA ANDITO+1; LDX TMIN ; CLEAR THEN PLOT...;REAND LDY TMIN PLP PHP BCS PLTITO;ANDITO LDA TABLE,X ; LOCATION GETS MODIFIED AND (BY2),Y STA (BY2),Y INY INX CPY TMAX BNE ANDITO; BEQ WFD;PLTITO LDA TABLE,X ; LOCATION GETS MODIFIED AND (BY2),Y ORA TABLE,X STA (BY2),Y INY INX CPY TMAX BNE PLTITO;WFD LDA BY2 ADC #<319 ; CS STA BY2 LDA BY2+1 ADC #>320 STA BY2+1 CMP #$1E+>BASE ; OFF SCREEN? (INTO SCORE) BCS OUTU37 TXA ; COMP IF OBJECT OFF SCREEN ADC TEM2 ; CC TAX CPX TEM2+1 BCC REAND;OUTU37 PLP RTS; .FILE SPECS