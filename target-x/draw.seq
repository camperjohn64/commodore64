;********************************;**                            **;**     NO-ERROR HRSUPP 64     **;**        MULTI-COLOUR        **;**                            **;**  POSITIVE Y,NOT CARTESIAN  **;**                            **;** NOT ACCESSABLE FROM BASIC  **;**                            **;********************************;; HRINIT - INITIALIZE; HRREST - RESTORE; CLRHR  - CLEAR SCREEN; VECPLT - DRAW STRAIGHT LINE; SETPIX - TURN ON PIXEL;; HRADDR - GIVEN X-COORD (1 BYTE); AND Y-COORD (1 BYTE); CALCULATE BYT ADDRESS AND BITNO;; CLOBBERS X, LEAVES Y=0;; ENTER HERE IF X1, Y1 ARE SET;HRADDR LDA #0 ; SET HIGH BYTE TO ZERO STA BYT+1 LDA Y1 AND #$F8 ; FORM ROW # ASL A ; MULT BY 2 ROL BYT+1 ASL A ; MULT BY 4 ROL BYT+1 ASL A ; MULT BY 8 ROL BYT+1 PHA ; SAVE ON STACK STA TEMP ; AND IN TEMP LDA BYT+1 STA TEMP+1 ; TEMP HAS 8*Y PLA ; RESTORE A ASL A ; MULT BY 16 ROL BYT+1 ASL A ; MULT BY 32 ROL BYT+1 ; (CARRY STILL CLEAR) ADC TEMP ; FORM 32+8 = 40* STA BYT ; INTO BYT LDA BYT+1 ADC TEMP+1 STA BYT+1 LDA X1 ; NOW ADD CHAR AND #$7C ASL A ADC BYT STA BYT PHP ; SAVE OVERFLOW LDA X1 AND #$80 ; ADD HIGH BIT ASL A ROL A PLP ADC BYT+1 STA BYT+1 ; (CARRY STILL CLEAR) LDA Y1 ; NOW ADD LINE AND #7 ; BY MASKING HIGH BITS ADC BYT STA BYT LDA BYT+1 ; FINISH BY ADDING BASE ADC #>BASE STA BYT+1 LDA X1 ; SET BITNO AND #3 ; IS LOW 3 BITS TAX ; AND INDEX TO TABLE LDA MSKTB,X STA BITNO RTS ; BYT AND BITNO NOW SET;; ** FASTPLOT **;; GRAPHIC SUBROUTINE FOR LINE DRAWING; ON 160*200 HI-RES MEMORY;; ORIGINALLY WRITTEN AS VECTOR GENERATOR; FOR HOUSTON INSTRUMENT HIPLOT; DIGITAL INCREMENTAL PLOTTER;; MORE EFFICIENT ALGORITHM BY W. MCWORTER; IN BYTE MAY 1981, P202;; RE-WRITTEN FOR MTU VISIBLE MEMORY (TM); BY F. COVITZ, AUG. 1981; REVISED NOV. 1982 FOR CBM-64;;*****************************;*                           *;* TYPO IN ORIGINAL LETTER   *;*                           *;* IT READS; A$="RQVWPS...." *;*                   *       *;*SHOULD BE; A$="RQVWRS...." *;*                           *;*****************************;; COME IN WITH X1,Y1 AND X2,Y2; AND FIRST PIXEL SET; I.E. BYT,BYT+1, AND BITNO ARE SET; VIA CALL TO PIXADR; ROUTINE DRAWS BEST STRAIGHT LINE; LEAVES WITH X1_X2,Y1_Y2;; LEAVES WITH Y=0, X CLOBBERED; ROUTINE CHECKS FOR OVERFLOW;; LOOK LATER ON FOR JSR TO FNDVEC;FNDVEC SEC ; FORM DELTX (SIGNED) LDA X2 SBC X1 STA DELTX LDA #0 SBC #0 STA DELTX+1 SEC ; FORM DELTY (SIGNED) LDA Y2 SBC Y1 STA DELTY LDA #0 SBC #0; STA DELTY+1 LDA X2 ; X1,Y1_X2,Y2 STA X1 LDA Y2 STA Y1;; NOW HAVE DELTX,DELTY (SIGNED);; ** MOVE **;; GIVEN DELTX, DELTY; DRAW/MOVE THE BEST STRAIGHT LINE; LDA #0 ; DETERMINE OCTANT STA I BIT DELTX+1 ; CHECK DELTX < 0 BPL MV1 LDA DELTX ; CHANGE SIGN SEC EOR #$FF ADC #0 STA DELTX LDA DELTX+1 EOR #$FF ADC #0 STA DELTX+1 LDA #2 STA IMV1 BIT DELTY+1 ; CHECK DELTY < 0 BPL MV2 LDA DELTY SEC EOR #$FF ADC #0 STA DELTY LDA DELTY+1 EOR #$FF ADC #0 STA DELTY+1 CLC LDA I ADC #4 STA IMV2 LDX DELTX ; CHECK DELTX-DELTY CPX DELTY ; SET CARRY FOR LOW BYTE LDA DELTX+1 ; NOW HIGH BYTE TAY ; SET Y = DELTX SBC DELTY+1 BPL MV3 LDA DELTY ; INTERCHANGE DELTX,Y STA DELTX LDA DELTY+1 STA DELTX+1 STX DELTY STY DELTY+1 CLC LDA I ADC #8 STA IMV3 LDA DELTX ; FORM E=-DELTX/2 SEC EOR #$FF ADC #0 STA E LDA DELTX+1 EOR #$FF ADC #0 STA E+1 SEC ; CHECK FOR NEGATIVE BMI MV4 CLCMV4 ROR E+1 ; DIVIDE BY 2 ROR E LDY #0 ; SET Y=0 STY C ; SET COUNTER TO ZERO STY C+1 RTS;; ** MAIN DRAWING LOOP **;MV5 LDX I ; GET DIRECTION IN X CLC ; FORM E=E+DELTY LDA E ADC DELTY STA E ; FIRST LOW BYTE LDA E+1 ADC DELTY+1 STA E+1 BMI MV6 SEC ; FORM E=E-DELTX LDA E SBC DELTX STA E LDA E+1 SBC DELTX+1 STA E+1 INX ; X BUMPED UP ONEMV6 JSR OUTPLT ; OUTPUT ONE MOVE INC C ; BUMP COUNTER UP 1 BNE MV7 INC C+1;; ENTER HERE ON 1ST PASS;MV7 JSR SPIX ; TURN ON A POINT LDA C ; DONE WHEN C > = DELTX CMP DELTX LDA C+1 SBC DELTX+1 BCC MV5; RTS ; DONE;VECPLT JSR FNDVEC ; ACTUAL DRAW LINE... BEQ MV7 ; ALWAYS...;; ** OUTPLT **;; OUTPUT AN ELEMENTARY MOVE;OUTPLT TXA ASL A ; MULT BY TWO TO GET INDEX TAXOUTPL2 LDA MOVTAB+1,X ; GET THE VECTOR PHA ; HIGH BYTE ON STACK LDA MOVTAB,X PHA ; LOW BYTE ON STACK RTS ; DO COMPUTED JUMP;; RETURN VIA RTS TO JSR OUTPLT(1);LL JSR LEFT ; GO LEFT, FALL THROUGH TO DOWNDOWN LDA BYT AND #7 ; EXAM LOWEST 3 BITS EOR #7 ; FLIP THEM BEQ DN2 ; ORIGINAL BYTE WAS XXXX111 INC BYT ; ELSE JUST BUMP BY 1 BNE DN3 INC BYT+1 BNE DN3 ; BRANCH ALWAYSDN2 CLC ; ADD 320-7 LDA BYT ADC #<313 STA BYT LDA BYT+1 ADC #>313 STA BYT+1DN3 RTS;UR JSR RIGHT ; 1ST RIGHT, FALL THROUGH TO UPUP LDA BYT AND #7 ; CHECK LOW BITS BNE UP1 ; IF BYTE WAS NOT XXXXX000 SEC ; ELSE SUBTRACT 320-7 LDA BYT SBC #<313 STA BYT LDA BYT+1 SBC #>313 STA BYT+1 BNE UP3 ; BRANCH ALWAYSUP1 LDA BYT ; DECREMENT BY 1 BNE UP2 DEC BYT+1UP2 DEC BYTUP3 RTS;UL JSR UP ; 1ST UP, FALL THROUGH TO LEFTLEFT ASL BITNO ; GO 2 PIXELS LEFT FOR MULT ROL BITNO BCC LF2 ; NO CORRECTION ON CARRY CLEAR ROL BITNO ; SET BITNO=11 AND CLEAR CARRY LDA BYT SBC #7 ; (-8 SINCE CARRY IS CLEAR) STA BYT BCS LF2 DEC BYT+1LF2 RTS;LR JSR DOWN ; 1ST DOWN,FALL THROUGH TO RIGHTRIGHT LSR BITNO ; GO 2 PIXELS RIGHT FOR MULT ROR BITNO BCC RGT1 ROR BITNO ; SET BITNO=$80 AND CLEAR CARRY LDA BYT ADC #8 ; ONE CELL RIGHT STA BYT BCC RGT1 INC BYT+1RGT1 RTS;;  CLEARS EXACTLY 6722 BYTES;       FOR GAME AREA;CLRHR JSR CLRTOP; LDX #0;CLRHR2 LDA BOTTOM,X STA HRLAST+1,X LDA BOTTOM+$100,X STA HRLAST+$101,X LDA BOTTOM+$200,X STA HRLAST+$201,X LDA BOTTOM+$300,X STA HRLAST+$301,X LDA BOTTOM+$3FE,X STA HRLAST+$3FF,X INX BNE CLRHR2;SETCL1 LDA COL12 ; DO 4 PAGES STA SCRN,X STA SCRN+$100,X STA SCRN+$200,X STA SCRN+$2F7,X LDA COL3 STA COLRAM,X STA COLRAM+$100,X STA COLRAM+$200,X STA COLRAM+$2F7,X INX BNE SETCL1; RTS;;  HRINIT - SETS UP HI-RES;HRINIT LDA #59 ; HI-RES MODE STA HRCTRL LDA #$18 ; BYT AT $A000, SCRN AT $8400 STA HRMREG LDA #216 STA HRMULT JMP CLRHR ; FORCE TO ALL ZEROES;; SETPIX;; ENTER WITH X1,Y1 ALREADY SET;SETPIX JSR HRADDR ; CALCULATE ADDRESS LDY #0 ; PLOT IT...SPIX LDA BITNO EOR #$FF AND (BYT),Y STA TEMP LDX COLNUM LDA COLLS,X AND BITNO ORA TEMP STA (BYT),Y RTS;MOVTAB .WORD RIGHT-1 ; RIGHT .WORD LR-1 ; DOWN/RIGHT .WORD LEFT-1 ; LEFT .WORD LL-1 ; DOWN/LEFT .WORD RIGHT-1 ; RIGHT .WORD UR-1 ; UP/RIGHT .WORD LEFT-1 ; LEFT .WORD UL-1 ; UP/LEFT .WORD DOWN-1 ; DOWN .WORD LR-1 ; DOWN/RIGHT .WORD DOWN-1 ; DOWN .WORD LL-1 ; LEFT/DOWN .WORD UP-1 ; UP .WORD UR-1 ; UP/RIGHT .WORD UP-1 ; UP .WORD UL-1 ; UP/LEFT;MSKTB .BYTE %11000000 .BYTE %00110000 .BYTE %00001100 .BYTE %00000011;COLLS .BYTE %00000000 .BYTE %01010101 .BYTE %10101010 .BYTE %11111111; .FILE BOTTOM.MAP